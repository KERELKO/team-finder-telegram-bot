from dataclasses import dataclass
from enum import StrEnum

from src.common.config import get_conf
from src.domain.entities.games.base import GameData
from src.common.utils import get_game_by_id, get_game_rank_value


class BotCommand(StrEnum):
    START = 'start'
    HELP = 'help'
    FIND_TEAM = 'find_team'
    CREATE_PROFILE = 'create_profile'
    CREATE_TEAM = 'create_team'
    UPDATE_TEAM = 'update_team'


_START_TEXT = """
–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî TeamFinderBot ü§ñ\n
–ú–æ—è –º—ñ—Å—ñ—è ‚Äî –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ª—é–±–ª–µ–Ω–∏—Ö —ñ–≥–æ—Ä üéÆ\n
–°–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /{0}, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –º–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ!
"""
START_TEXT = _START_TEXT.format(BotCommand.HELP)

_HELP_TEXT = """
–î–æ–ø–æ–º—ñ–∂–Ω–∏–π —Ç–µ–∫—Å—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ—é /{0}\n
–ü–æ—á–∞—Ç–∏ /{1} –∫–æ–º–∞–Ω–¥–∞\n
/{2} - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—åüéÄ\n
/{3} - –∑–Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –∑–≥—ñ–¥–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—éüîé\n
/{4} - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—Éü™Ñ\n
/{5} - –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏üìù\n
"""
HELP_TEXT = _HELP_TEXT.format(
    BotCommand.HELP,
    BotCommand.START,
    BotCommand.CREATE_PROFILE,
    BotCommand.FIND_TEAM,
    BotCommand.CREATE_TEAM,
    BotCommand.UPDATE_TEAM,
)


_TEAM_INFO_TEXT_HTML = """
{0}
‚õì<u><b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è:</b></u> {1}\n
‚úèÔ∏è<u><b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b></u> {2}\n
‚öîÔ∏è<u><b>–ì—Ä–∞:</b></u> {3}\n
üéñ<u><b>–°–∫—ñ–ª:</b></u> {4}\n
üë•<u><b>–ì—Ä–∞–≤—Ü—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ:</b></u> {5}\n
{6}
"""


@dataclass(eq=False, repr=False)
class TeamInfoTextHTML:
    """Formats base team info text with given params, use `__str__` to get formatted text"""
    url: str
    title: str
    game: str
    skill: str
    players_to_fill: int
    description: str | None = None
    preface: str | None = None

    def __str__(self) -> str:
        minutes: int = get_conf().REDIS_OBJECTS_LIFETIME // 60
        text = _TEAM_INFO_TEXT_HTML
        if minutes == 1:
            minutes_text = f'{minutes} —Ö–≤–∏–ª–∏–Ω—É'
        elif minutes in [2, 3, 4]:
            minutes_text = f'{minutes} —Ö–≤–∏–ª–∏–Ω–∏'
        else:
            minutes_text = f'{minutes} —Ö–≤–∏–ª–∏–Ω'
        if self.preface is not None:
            preface = self.preface
        else:
            preface = (
                'üèÜ–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä —Ç–≤–æ—è –≥—Ä—É–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—Å—Ç—É–ø—É –¥–ª—è —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ '
                f'–Ω–∞ <u><b>{minutes_text}</b></u>\n'
            )

        desc_text = f'üìñ<u><b>–û–ø–∏—Å:</b></u> {self.description}' if self.description else ''

        return text.format(
            preface, self.url, self.title, self.game, self.skill, self.players_to_fill, desc_text
        )


_USER_INFO_TEXT_HTML = """
üë§<u><b>–ù—ñ–∫–Ω–µ–π–º:</b></u> {0}
{1}
‚öîÔ∏è<u><b>–Ü–≥—Ä–∏:</b></u>
{2}
"""


@dataclass(repr=False, eq=False)
class UserInfoTextHTML:
    id: int
    username: str
    games: list[GameData]
    show_id: bool = False

    def __str__(self) -> str:
        text = _USER_INFO_TEXT_HTML
        id_text = ''
        if self.show_id:
            id_text = f'üë§<u><b>ID:</b></u> {self.id}'
        games = []
        for game_data in self.games:
            game = get_game_by_id(game_data.id)
            if not game:
                continue
            games.append(f'\t<b>{game.name} [{get_game_rank_value(game, game_data.rating)}]</b>')

        return text.format(self.username, id_text, '\n'.join(games) if games else '')
